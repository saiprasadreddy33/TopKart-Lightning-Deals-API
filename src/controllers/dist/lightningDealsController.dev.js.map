{"version":3,"sources":["lightningDealsController.js"],"names":["fs","require","moment","lightningDealService","tokenUtils","lightningDealsData","JSON","parse","readFileSync","isDealExpired","deal","expiryTime","isAfter","checkDealExpiry","req","res","next","dealId","params","id","find","status","json","error","getLightningDeals","unexpiredDeals","filter","getLightningDealById","placeOrder","message","module","exports"],"mappings":";;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAME,oBAAoB,GAAGF,OAAO,CAAC,kCAAD,CAApC;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,qBAAD,CAA1B,C,CAEA;;;AACA,IAAII,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWP,EAAE,CAACQ,YAAH,CAAgB,qBAAhB,CAAX,CAAzB,C,CAEA;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAMC,UAAU,GAAGT,MAAM,CAACQ,IAAI,CAACC,UAAN,EAAkB,qBAAlB,CAAzB;AACA,SAAOT,MAAM,GAAGU,OAAT,CAAiBD,UAAjB,CAAP;AACD,C,CAED;;;AACA,SAASE,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACvC,MAAMC,MAAM,GAAGH,GAAG,CAACI,MAAJ,CAAWC,EAA1B;AACA,MAAMT,IAAI,GAAGL,kBAAkB,CAACe,IAAnB,CAAwB,UAACV,IAAD;AAAA,WAAUA,IAAI,CAACS,EAAL,KAAYF,MAAtB;AAAA,GAAxB,CAAb;;AAEA,MAAI,CAACP,IAAL,EAAW;AACT,WAAOK,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,MAAId,aAAa,CAACC,IAAD,CAAjB,EAAyB;AACvB,WAAOK,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAEDP,EAAAA,IAAI;AACL,C,CAED;;;AACA,SAASQ,iBAAT,CAA2BV,GAA3B,EAAgCC,GAAhC,EAAqC;AACnC;AACA,MAAMU,cAAc,GAAGpB,kBAAkB,CAACqB,MAAnB,CAA0B,UAAChB,IAAD;AAAA,WAAU,CAACD,aAAa,CAACC,IAAD,CAAxB;AAAA,GAA1B,CAAvB;AACAK,EAAAA,GAAG,CAACO,IAAJ,CAASG,cAAT;AACD,C,CAED;;;AACA,SAASE,oBAAT,CAA8Bb,GAA9B,EAAmCC,GAAnC,EAAwC;AACtC,MAAME,MAAM,GAAGH,GAAG,CAACI,MAAJ,CAAWC,EAA1B;AACA,MAAMT,IAAI,GAAGL,kBAAkB,CAACe,IAAnB,CAAwB,UAACV,IAAD;AAAA,WAAUA,IAAI,CAACS,EAAL,KAAYF,MAAtB;AAAA,GAAxB,CAAb;;AAEA,MAAI,CAACP,IAAL,EAAW;AACT,WAAOK,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,MAAId,aAAa,CAACC,IAAD,CAAjB,EAAyB;AACvB,WAAOK,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAEDR,EAAAA,GAAG,CAACO,IAAJ,CAASZ,IAAT;AACD,C,CAED;;;AACA,SAASkB,UAAT,CAAoBd,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,MAAME,MAAM,GAAGH,GAAG,CAACI,MAAJ,CAAWC,EAA1B;AACA,MAAMT,IAAI,GAAGL,kBAAkB,CAACe,IAAnB,CAAwB,UAACV,IAAD;AAAA,WAAUA,IAAI,CAACS,EAAL,KAAYF,MAAtB;AAAA,GAAxB,CAAb;;AAEA,MAAI,CAACP,IAAL,EAAW;AACT,WAAOK,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,MAAId,aAAa,CAACC,IAAD,CAAjB,EAAyB;AACvB,WAAOK,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD,GAV2B,CAY5B;;;AAEAR,EAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEO,IAAAA,OAAO,EAAE;AAAX,GAAT;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfP,EAAAA,iBAAiB,EAAjBA,iBADe;AAEfG,EAAAA,oBAAoB,EAApBA,oBAFe;AAGfC,EAAAA,UAAU,EAAVA,UAHe;AAIff,EAAAA,eAAe,EAAfA;AAJe,CAAjB","sourcesContent":["const fs = require('fs');\r\nconst moment = require('moment');\r\nconst lightningDealService = require('../services/lightningDealService');\r\nconst tokenUtils = require('../utils/tokenUtils');\r\n\r\n// Read lightning deals data from JSON file\r\nlet lightningDealsData = JSON.parse(fs.readFileSync('lightningDeals.json'));\r\n\r\n// Function to check if a lightning deal has expired\r\nfunction isDealExpired(deal) {\r\n  const expiryTime = moment(deal.expiryTime, 'YYYY-MM-DD HH:mm:ss');\r\n  return moment().isAfter(expiryTime);\r\n}\r\n\r\n// Middleware function to check if a lightning deal has expired\r\nfunction checkDealExpiry(req, res, next) {\r\n  const dealId = req.params.id;\r\n  const deal = lightningDealsData.find((deal) => deal.id === dealId);\r\n\r\n  if (!deal) {\r\n    return res.status(404).json({ error: 'Deal not found' });\r\n  }\r\n\r\n  if (isDealExpired(deal)) {\r\n    return res.status(400).json({ error: 'Deal has expired' });\r\n  }\r\n\r\n  next();\r\n}\r\n\r\n// Controller function to get all lightning deals\r\nfunction getLightningDeals(req, res) {\r\n  // Filter out expired deals\r\n  const unexpiredDeals = lightningDealsData.filter((deal) => !isDealExpired(deal));\r\n  res.json(unexpiredDeals);\r\n}\r\n\r\n// Controller function to get a single lightning deal by ID\r\nfunction getLightningDealById(req, res) {\r\n  const dealId = req.params.id;\r\n  const deal = lightningDealsData.find((deal) => deal.id === dealId);\r\n\r\n  if (!deal) {\r\n    return res.status(404).json({ error: 'Deal not found' });\r\n  }\r\n\r\n  if (isDealExpired(deal)) {\r\n    return res.status(400).json({ error: 'Deal has expired' });\r\n  }\r\n\r\n  res.json(deal);\r\n}\r\n\r\n// Controller function to place an order for a lightning deal\r\nfunction placeOrder(req, res) {\r\n  const dealId = req.params.id;\r\n  const deal = lightningDealsData.find((deal) => deal.id === dealId);\r\n\r\n  if (!deal) {\r\n    return res.status(404).json({ error: 'Deal not found' });\r\n  }\r\n\r\n  if (isDealExpired(deal)) {\r\n    return res.status(400).json({ error: 'Deal has expired' });\r\n  }\r\n\r\n  // Process order logic here...\r\n\r\n  res.json({ message: 'Order placed successfully' });\r\n}\r\n\r\nmodule.exports = {\r\n  getLightningDeals,\r\n  getLightningDealById,\r\n  placeOrder,\r\n  checkDealExpiry\r\n};\r\n"],"file":"lightningDealsController.dev.js"}