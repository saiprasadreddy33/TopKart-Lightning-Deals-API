{"version":3,"sources":["lightningDeals.update.test.js"],"names":["request","require","app","lightningDealModel","describe","generateToken","lightningDeal","beforeAll","authMiddleware","userId","description","discountPercentage","startTime","Date","endTime","getTime","create","result","id","_id","toString","afterAll","regeneratorRuntime","async","_context2","prev","next","awrap","token","deleteOne","stop","title","response","_context3","concat","sent","toBe","it","_context4","put","set","otherToken","_context5","send","expect","statusCode","_context6","body"],"mappings":"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","file":"lightningDeals.update.test.min.js","sourcesContent":["const request = require('supertest');\r\nconst app = require('../../app');\r\nconst { generateToken } = require('../../utils/tokenUtils');\r\nconst lightningDealModel = require('../../models/lightningDealModel');\r\nconst authMiddleware = require('../../middleware/authMiddleware');\r\n\r\ndescribe('PUT /lightning-deals/:id', () => {\r\n  let token;\r\n  let lightningDeal;\r\n  let id;\r\n\r\n  beforeAll(async () => {\r\n    // generate token for authentication\r\n    token = await generateToken({ userId: 'testuser' });\r\n\r\n    // create a new lightning deal in the database\r\n    lightningDeal = {\r\n      title: 'Test Lightning Deal',\r\n      description: 'This is a test lightning deal',\r\n      discountPercentage: 30,\r\n      startTime: new Date(),\r\n      endTime: new Date(new Date().getTime() + 1000 * 60 * 60 * 24), // 24 hours from now\r\n    };\r\n    const result = await lightningDealModel.create(lightningDeal);\r\n    id = result._id.toString();\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // delete the lightning deal from the database\r\n    await lightningDealModel.deleteOne({ _id: id });\r\n  });\r\n\r\n  it('should return 401 unauthorized if user is not authenticated', async () => {\r\n    const response = await request(app)\r\n      .put(`/lightning-deals/${id}`)\r\n      .send({ title: 'Updated Title' });\r\n    expect(response.statusCode).toBe(401);\r\n  });\r\n\r\n  it('should return 404 not found if lightning deal does not exist', async () => {\r\n    const response = await request(app)\r\n      .put(`/lightning-deals/nonexistent-id`)\r\n      .set('Authorization', `Bearer ${token}`)\r\n      .send({ title: 'Updated Title' });\r\n    expect(response.statusCode).toBe(404);\r\n  });\r\n\r\n  it('should return 403 forbidden if user is not authorized to update lightning deal', async () => {\r\n    // create a new user to generate a different token for authentication\r\n    const otherUserId = 'otheruser';\r\n    const otherToken = await generateToken({ userId: otherUserId });\r\n\r\n    const response = await request(app)\r\n      .put(`/lightning-deals/${id}`)\r\n      .set('Authorization', `Bearer ${otherToken}`)\r\n      .send({ title: 'Updated Title' });\r\n    expect(response.statusCode).toBe(403);\r\n  });\r\n\r\n  it('should update lightning deal and return 200 ok if user is authorized to update lightning deal', async () => {\r\n    const response = await request(app)\r\n      .put(`/lightning-deals/${id}`)\r\n      .set('Authorization', `Bearer ${token}`)\r\n      .send({ title: 'Updated Title' });\r\n    expect(response.statusCode).toBe(200);\r\n    expect(response.body.title).toBe('Updated Title');\r\n  });\r\n});\r\n"]}