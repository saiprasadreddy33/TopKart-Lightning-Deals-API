{"version":3,"sources":["auth.test.js"],"names":["app","require","request","path","describe","newUser","password","username","response","regeneratorRuntime","async","_context","prev","next","awrap","role","send","expect","sent","body","message","toEqual","user","id","toBeDefined","stop","test","_context2","stringContaining","_context3","post","token"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,UACdC,QAAUD,QAAQ,aADlBD,GAAMC,QAAQ,MAGdE,KAAOF,QAAQ,QAErBG,SAAS,qBAAsB,WAH/BA,SAAWH,qBAAX,WAKI,IAAMI,EAAU,CAJdF,SAAOF,WAMPK,SAAU,eAJhBF,KAAS,YAGHG,KAAAA,2BADc,WAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAEJZ,QAFIF,KAGde,KAAM,iBAHRC,KAAAX,GAMKY,OAAA,eAAA,QAA4BA,OAAA,MANjB,KAAA,EAEdX,EAFcK,EAAAO,KAMiBD,OAAAT,EAAAW,KAAAC,SAAAC,QAAA,6BAAAJ,OAAAT,EAAAW,KAAAG,KAAAC,IAAAC,cAAAP,OAAAT,EAAAW,KAAAG,KAAAf,UAAAc,QAAAhB,EAAAE,UAAAU,OAAAT,EAAAW,KAAAG,KAAAP,MAAAM,QAAAhB,EAAAU,MANjB,KAAA,EAAA,IAAA,MAAA,OAAAJ,EAAAc,YAkBhBC,KAAK,iDAAkD,WAAA,IAAAlB,EAAA,OAAAC,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAAAc,EAAAd,KAAA,EAAAJ,mBAAAK,MAZtBZ,QAAAF,KACzBQ,KAAAA,iBAKNS,KAAAA,CACAA,SAAM,eACNA,KAAAA,aAWGA,OAAO,eAAgB,QAnBKA,OAAA,MAYsB,KAAA,EAZtBT,EAYsBmB,EAAAT,KAZtBD,OAAAT,EAAAW,KAAAC,SAAAC,QAAAJ,OAAAW,iBAAA,aAYsB,KAAA,EAAA,IAAA,MAAA,OAAAD,EAAAF,cAAvDC,SAAK,kBAAA,WAAkDA,KAAA,oCAAA,WAAA,IAAAlB,EAAA,OAAAC,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,OAAAgB,EAAAhB,KAAA,EAAAJ,mBAAAK,MAAAZ,QAAAF,KAAA8B,KAAA,cAAAd,KAAA,CAAAT,SAAA,WAAAD,SAAA,iBAIjDA,OAAAA,eAAU,QACVS,OAAAA,MALiD,KAAA,EAAAP,EAAAqB,EAAAX,KAG7CD,OAAAT,EAILS,KAAOG,SAAAC,QAAgB,6BAmB1BJ,OAAOT,EAASW,KAAKY,OAAOP,cA1ByB,KAAA,EAAA,IAAA,MAAA,OAAAK,EAAAJ,YASrDR,KAAAA,6CACEA,WAAAA,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAoBqBf,QAAQF,KA9BsB8B,KAAA,cAAAd,KAAA,CAAAT,SAAA,WAAAD,SAAA,kBAAAW,OAAA,eAAA,QAAvDA,OAAA,MAUIA,KAAAA,EAoBIT,EApBJS,EAAAA,KA7BNA,OAAAT,EAAAW,KAAAC,SAAAC,QAkCAjB,OAASwB,iBAAmB,iCALtBX,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA","file":"auth.test.min.js","sourcesContent":["const app = require('../app');\r\nconst request = require('supertest');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\ndescribe('Authentication API', () => {\r\n  describe('POST /api/register', () => {\r\n    const newUser = {\r\n      username: 'testuser',\r\n      password: 'testpassword',\r\n      role: 'customer',\r\n    };\r\n\r\n    test('should create a new user', async () => {\r\n      const response = await request(app)\r\n        .post('/api/register')\r\n        .send(newUser)\r\n        .expect('Content-Type', /json/)\r\n        .expect(201);\r\n      expect(response.body.message).toEqual('User created successfully');\r\n      expect(response.body.user.id).toBeDefined();\r\n      expect(response.body.user.username).toEqual(newUser.username);\r\n      expect(response.body.user.role).toEqual(newUser.role);\r\n    });\r\n\r\n    test('should return error if missing required fields', async () => {\r\n      const response = await request(app)\r\n        .post('/api/register')\r\n        .send({\r\n          password: 'testpassword',\r\n          role: 'customer',\r\n        })\r\n        .expect('Content-Type', /json/)\r\n        .expect(400);\r\n      expect(response.body.message).toEqual(\r\n        expect.stringContaining('required')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('POST /api/login', () => {\r\n    test('should authenticate existing user', async () => {\r\n      const response = await request(app)\r\n        .post('/api/login')\r\n        .send({\r\n          username: 'testuser',\r\n          password: 'testpassword',\r\n        })\r\n        .expect('Content-Type', /json/)\r\n        .expect(200);\r\n      expect(response.body.message).toEqual('Authentication successful');\r\n      expect(response.body.token).toBeDefined();\r\n    });\r\n\r\n    test('should return error if invalid credentials', async () => {\r\n      const response = await request(app)\r\n        .post('/api/login')\r\n        .send({\r\n          username: 'testuser',\r\n          password: 'wrongpassword',\r\n        })\r\n        .expect('Content-Type', /json/)\r\n        .expect(401);\r\n      expect(response.body.message).toEqual(\r\n        expect.stringContaining('Invalid username or password')\r\n      );\r\n    });\r\n  });\r\n});\r\n"]}