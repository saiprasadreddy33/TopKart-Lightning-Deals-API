{"version":3,"sources":["auth.test.js"],"names":["app","require","request","fs","path","describe","newUser","username","password","role","test","post","send","expect","response","body","message","toEqual","user","id","toBeDefined","stringContaining","token"],"mappings":"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","sourcesContent":["const app = require('../app');\r\nconst request = require('supertest');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\ndescribe('Authentication API', () => {\r\n  describe('POST /api/register', () => {\r\n    const newUser = {\r\n      username: 'testuser',\r\n      password: 'testpassword',\r\n      role: 'customer',\r\n    };\r\n\r\n    test('should create a new user', async () => {\r\n      const response = await request(app)\r\n        .post('/api/register')\r\n        .send(newUser)\r\n        .expect('Content-Type', /json/)\r\n        .expect(201);\r\n      expect(response.body.message).toEqual('User created successfully');\r\n      expect(response.body.user.id).toBeDefined();\r\n      expect(response.body.user.username).toEqual(newUser.username);\r\n      expect(response.body.user.role).toEqual(newUser.role);\r\n    });\r\n\r\n    test('should return error if missing required fields', async () => {\r\n      const response = await request(app)\r\n        .post('/api/register')\r\n        .send({\r\n          password: 'testpassword',\r\n          role: 'customer',\r\n        })\r\n        .expect('Content-Type', /json/)\r\n        .expect(400);\r\n      expect(response.body.message).toEqual(\r\n        expect.stringContaining('required')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('POST /api/login', () => {\r\n    test('should authenticate existing user', async () => {\r\n      const response = await request(app)\r\n        .post('/api/login')\r\n        .send({\r\n          username: 'testuser',\r\n          password: 'testpassword',\r\n        })\r\n        .expect('Content-Type', /json/)\r\n        .expect(200);\r\n      expect(response.body.message).toEqual('Authentication successful');\r\n      expect(response.body.token).toBeDefined();\r\n    });\r\n\r\n    test('should return error if invalid credentials', async () => {\r\n      const response = await request(app)\r\n        .post('/api/login')\r\n        .send({\r\n          username: 'testuser',\r\n          password: 'wrongpassword',\r\n        })\r\n        .expect('Content-Type', /json/)\r\n        .expect(401);\r\n      expect(response.body.message).toEqual(\r\n        expect.stringContaining('Invalid username or password')\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"file":"auth.test.dev.js"}