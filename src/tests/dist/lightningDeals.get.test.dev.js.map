{"version":3,"sources":["lightningDeals.get.test.js"],"names":["request","require","app","describe","test","get","response","expect","status","toBe","type","body","toEqual","any","Array","objectContaining","id","title","description","discount","startDate","String","endDate"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AAEAE,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACrCC,EAAAA,IAAI,CAAC,6DAAD,EAAgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAC3CJ,OAAO,CAACE,GAAD,CAAP,CAAaG,GAAb,CAAiB,kBAAjB,CAD2C;;AAAA;AAC5DC,YAAAA,QAD4D;AAElEC,YAAAA,MAAM,CAACD,QAAQ,CAACE,MAAV,CAAN,CAAwBC,IAAxB,CAA6B,GAA7B;AACAF,YAAAA,MAAM,CAACD,QAAQ,CAACI,IAAV,CAAN,CAAsBD,IAAtB,CAA2B,kBAA3B;AACAF,YAAAA,MAAM,CAACD,QAAQ,CAACK,IAAV,CAAN,CAAsBC,OAAtB,CAA8BL,MAAM,CAACM,GAAP,CAAWC,KAAX,CAA9B;;AAJkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhE,CAAJ;AAOAV,EAAAA,IAAI,CAAC,4DAAD,EAA+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAC1CJ,OAAO,CAACE,GAAD,CAAP,CAAaG,GAAb,CAAiB,oBAAjB,CAD0C;;AAAA;AAC3DC,YAAAA,QAD2D;AAEjEC,YAAAA,MAAM,CAACD,QAAQ,CAACE,MAAV,CAAN,CAAwBC,IAAxB,CAA6B,GAA7B;AACAF,YAAAA,MAAM,CAACD,QAAQ,CAACI,IAAV,CAAN,CAAsBD,IAAtB,CAA2B,kBAA3B;AACAF,YAAAA,MAAM,CAACD,QAAQ,CAACK,IAAV,CAAN,CAAsBC,OAAtB,CAA8BL,MAAM,CAACQ,gBAAP,CAAwB;AACpDC,cAAAA,EAAE,EAAE,CADgD;AAEpDC,cAAAA,KAAK,EAAE,wBAF6C;AAGpDC,cAAAA,WAAW,EAAE,mCAHuC;AAIpDC,cAAAA,QAAQ,EAAE,EAJ0C;AAKpDC,cAAAA,SAAS,EAAEb,MAAM,CAACM,GAAP,CAAWQ,MAAX,CALyC;AAMpDC,cAAAA,OAAO,EAAEf,MAAM,CAACM,GAAP,CAAWQ,MAAX;AAN2C,aAAxB,CAA9B;;AAJiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/D,CAAJ;AAcAjB,EAAAA,IAAI,CAAC,kDAAD,EAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAChCJ,OAAO,CAACE,GAAD,CAAP,CAAaG,GAAb,CAAiB,sBAAjB,CADgC;;AAAA;AACjDC,YAAAA,QADiD;AAEvDC,YAAAA,MAAM,CAACD,QAAQ,CAACE,MAAV,CAAN,CAAwBC,IAAxB,CAA6B,GAA7B;;AAFuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArD,CAAJ;AAID,CA1BO,CAAR","sourcesContent":["const request = require('supertest');\r\nconst app = require('../app');\r\n\r\ndescribe('GET /lightning-deals', () => {\r\n  test('responds with json containing a list of all lightning deals', async () => {\r\n    const response = await request(app).get('/lightning-deals');\r\n    expect(response.status).toBe(200);\r\n    expect(response.type).toBe('application/json');\r\n    expect(response.body).toEqual(expect.any(Array));\r\n  });\r\n\r\n  test('responds with json containing the specified lightning deal', async () => {\r\n    const response = await request(app).get('/lightning-deals/1');\r\n    expect(response.status).toBe(200);\r\n    expect(response.type).toBe('application/json');\r\n    expect(response.body).toEqual(expect.objectContaining({\r\n      id: 1,\r\n      title: 'Example lightning deal',\r\n      description: 'This is an example lightning deal',\r\n      discount: 20,\r\n      startDate: expect.any(String),\r\n      endDate: expect.any(String)\r\n    }));\r\n  });\r\n\r\n  test('responds with 404 if lightning deal is not found', async () => {\r\n    const response = await request(app).get('/lightning-deals/999');\r\n    expect(response.status).toBe(404);\r\n  });\r\n});\r\n"],"file":"lightningDeals.get.test.dev.js"}