{"version":3,"sources":["lightningDeals.get.test.js"],"names":["request","require","app","describe","test","response","regeneratorRuntime","async","_context","prev","next","awrap","get","sent","status","toBe","type","expect","body","toEqual","any","Array","stop","_context2","objectContaining","id","endDate","String","_context3"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,aAClBC,IAAMD,QAAQ,UAEpBE,SAAS,uBAAwB,WAFjCC,KAAS,8DAAT,WAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAI2BX,QAAQE,KAAKU,IAAI,qBAJ5C,KAAA,EAIUP,EAJVG,EAAAK,KAEAV,OAASE,EAAAS,QAAAC,KAAwB,KAC/BX,OAAKC,EAAAW,MAAAD,KAAA,oBAA+DE,OAAAZ,EAAAa,MAAAC,QAAAF,OAAAG,IAAAC,QAHtE,KAAA,EAAA,IAAA,MAAA,OAAAb,EAAAc,YAGsElB,KAAA,6DAAA,WAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAAAa,EAAAb,KAAA,EAAAJ,mBAAAK,MAAAX,QAAAE,KAAAU,IAAA,uBAAA,KAAA,EAAAP,EAAAkB,EAAAV,KAAAI,OAAAZ,EAAAS,QAAAC,KAAA,KAAAE,OAAAZ,EAAAW,MAAAD,KAAA,oBAWlEE,OAAOZ,EAASa,MAAMC,QAAQF,OAAOO,iBAAiB,CAXYC,GAAA,EAC5DpB,MAAAA,yBACNY,YAAOZ,oCACPY,SAAAA,GACAA,UAAAA,OAAOZ,IAASa,QAadQ,QAAST,OAAOG,IAAIO,WAjB4C,KAAA,EAAA,IAAA,MAAA,OAAAJ,EAAAD,YAAAlB,KAAA,mDAAA,WAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAqB,GAAA,OAAA,OAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,KAAA,EAAA,OAAAkB,EAAAlB,KAAA,EAAAJ,mBAAAK,MAAAX,QAAAE,KAAAU,IAAA,yBAAA,KAAA,EAAAP,EAAAuB,EAAAf,KAAAI,OAAAZ,EAAAS,QAAAC,KAAA,KAAA,KAAA,EAAA,IAAA,MAAA,OAAAa,EAAAN","file":"lightningDeals.get.test.min.js","sourcesContent":["const request = require('supertest');\r\nconst app = require('../app');\r\n\r\ndescribe('GET /lightning-deals', () => {\r\n  test('responds with json containing a list of all lightning deals', async () => {\r\n    const response = await request(app).get('/lightning-deals');\r\n    expect(response.status).toBe(200);\r\n    expect(response.type).toBe('application/json');\r\n    expect(response.body).toEqual(expect.any(Array));\r\n  });\r\n\r\n  test('responds with json containing the specified lightning deal', async () => {\r\n    const response = await request(app).get('/lightning-deals/1');\r\n    expect(response.status).toBe(200);\r\n    expect(response.type).toBe('application/json');\r\n    expect(response.body).toEqual(expect.objectContaining({\r\n      id: 1,\r\n      title: 'Example lightning deal',\r\n      description: 'This is an example lightning deal',\r\n      discount: 20,\r\n      startDate: expect.any(String),\r\n      endDate: expect.any(String)\r\n    }));\r\n  });\r\n\r\n  test('responds with 404 if lightning deal is not found', async () => {\r\n    const response = await request(app).get('/lightning-deals/999');\r\n    expect(response.status).toBe(404);\r\n  });\r\n});\r\n"]}