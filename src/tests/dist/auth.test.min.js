"use strict";var app=require("../app"),request=require("supertest"),fs=require("fs"),path=require("path");describe("Authentication API",function(){describe("POST /api/register",function(){var r={username:"testuser",password:"testpassword",role:"customer"};test("should create a new user",function(){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(request(app).post("/api/register").send(r).expect("Content-Type",/json/).expect(201));case 2:t=e.sent,expect(t.body.message).toEqual("User created successfully"),expect(t.body.user.id).toBeDefined(),expect(t.body.user.username).toEqual(r.username),expect(t.body.user.role).toEqual(r.role);case 7:case"end":return e.stop()}})}),test("should return error if missing required fields",function(){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(request(app).post("/api/register").send({password:"testpassword",role:"customer"}).expect("Content-Type",/json/).expect(400));case 2:t=e.sent,expect(t.body.message).toEqual(expect.stringContaining("required"));case 4:case"end":return e.stop()}})})}),describe("POST /api/login",function(){test("should authenticate existing user",function(){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(request(app).post("/api/login").send({username:"testuser",password:"testpassword"}).expect("Content-Type",/json/).expect(200));case 2:t=e.sent,expect(t.body.message).toEqual("Authentication successful"),expect(t.body.token).toBeDefined();case 5:case"end":return e.stop()}})}),test("should return error if invalid credentials",function(){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(request(app).post("/api/login").send({username:"testuser",password:"wrongpassword"}).expect("Content-Type",/json/).expect(401));case 2:t=e.sent,expect(t.body.message).toEqual(expect.stringContaining("Invalid username or password"));case 4:case"end":return e.stop()}})})})});
//# sourceMappingURL=auth.test.min.js.map
